#!/usr/bin/ksh93
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright (c) 1984, 1986, 1987, 1988, 1989 AT&T. All rights reserved.
# Copyright (c) 1999, 2010, Oracle and/or its affiliates. All rights reserved.
# Copyright (c) 2010, 2011 Joyent Inc., All rights reserved.
#

set -x

. /lib/svc/share/smf_include.sh

#
# In a shared-IP zone we need this service to be up, but all of the work
# it tries to do is irrelevant (and will actually lead to the service
# failing if we try to do it), so just bail out.
# In the global zone and exclusive-IP zones we proceed.
#
smf_configure_ip || exit ${SMF_EXIT_OK}

# Make sure that the libraries essential to this stage of booting can be found.
LD_LIBRARY_PATH=/lib; export LD_LIBRARY_PATH

smf_netstrategy

if smf_is_globalzone; then
    dladm init-phys
    if /bin/bootparams | grep "^headnode=true" >/dev/null; then
        headnode="true"
    else
        headnode="false"
    fi

    #
    # Use the MAC address to sort the NICs and rename any that are out of
    # order so that we always get a consistent name for each NIC.
    #
    dladm show-phys -m -o ADDRESS,LINK | sort | nawk '{
	if ($1 == "ADDRESS")
		next

	l = length($2)

	pos = match($2, "[0-9]+$")
	if (pos == 0)
		next

	nm = substr($2, 1, pos - 1)
	id = substr($2, pos)

	i = idx[nm]++;
	if (id == i)
		next

	new_name = nm i
	tmp_name = "tmp_" nm i

	cmd = "dladm rename-link " $2 " " tmp_name
	cleanup[tmp_name] = new_name
	system(cmd)
    }
    END {
	for (i in cleanup) {
		cmd = "dladm rename-link " i " " cleanup[i]
		system(cmd)
	}
    }'

    # We strip leading zero from MAC (eg. 0c:ab => c:ab) to match ifconfig
    admin_nic=`/usr/bin/bootparams | grep "admin_nic" | cut -f2 -d'=' | sed 's/0\([0-9a-f]\)/\1/g'`
    if [[ -z "${admin_nic}" ]]; then
        admin_nic="undefined"
    fi

    coal="false"
    admin_started="false"
    admin_configured="false"
    external_started="false"
    external_nic=""

    if [[ ${headnode} == "true" ]]; then
        # Load the config
        zpool list | grep zones
        if [[ $? == 0 ]]; then
            . `svcprop -p "joyentfs/usb_copy_path" svc:/system/filesystem/joyent:default`/config
        else
            . /mnt/`svcprop -p "joyentfs/usb_mountpoint" svc:/system/filesystem/joyent:default`/config
        fi

        # We strip leading zero from MAC (eg. 0c:ab => c:ab) to match ifconfig
        admin_nic=`echo "${admin_nic}" | sed 's/0\([0-9a-f]\)/\1/g'`
        external_nic=`echo "${external_nic}" | sed 's/0\([0-9a-f]\)/\1/g'`

        if [[ -n ${admin_ip} ]] && [[ -n ${admin_netmask} ]]; then
            admin_configured="true"
        fi
    fi

    admin_phys=""
    external_phys=""

    dladm show-phys -m -p -o link,address | sed 's/:/\ /;s/\\//g' | while read iface mac; do
        if [[ ${mac} == ${admin_nic} ]]; then
            admin_phys=${iface}
            ifconfig ${iface} plumb
            if [[ ${headnode} == "true" ]]; then
                if [[ ${admin_configured} == "true" ]]; then
                    ifconfig ${iface} inet ${admin_ip} netmask ${admin_netmask} up
                    admin_started="true"
                    if [[ ${coal} == "true" ]]; then
                        # Also create a bridge which allows traffic to flow correctly to VMWare Host-only
                        dladm create-bridge -l ${iface} vmwarebr
                    fi
                else
                    echo "WARNING: headnode but no admin_{ip,netmask} in config, not bringing up admin network."
                fi
            else
                ifconfig ${iface} dhcp
                admin_started="true"
            fi
        elif [[ ${external_started} == "false" ]] && [[ ${headnode} == "true" ]] && [[ ${mac} == ${external_nic} ]] && [[ ! -z "${external_ip}" ]]; then
            # in CoaL we also bring up the NAT NIC
            ifconfig ${iface} plumb
            if [[ ${external_ip} == "dhcp" ]]; then
                ifconfig ${iface} dhcp primary
            else
                ifconfig ${iface} inet ${external_ip} netmask ${external_netmask} up
                if [[ ! -z "${external_gateway}" ]]; then
                    echo "${external_gateway}" > /etc/defaultrouter
                fi
            fi
            external_started="true"
            external_phys=${iface}

            # Set up the GZ to NAT for Coal
            if [[ ${coal} == "true" ]]; then
                # Convert the admin IP and netmask to CIDR notation
                OLDIFS=$IFS
                IFS=.
                set -- $admin_ip
                a=$1
                b=$2
                c=$3
                d=$4
                set -- $admin_netmask
                a=$(($a & $1))
                b=$(($b & $2))
                c=$(($c & $3))
                d=$(($d & $4))
                IFS=$OLDIFS

                let netip=0x$(printf "%02X%02X%02X%02X" $1 $2 $3 $4)
                bits=32
                while [ $(($netip & 1 )) == 0 ] ; do
                    netip=$(($netip >> 1))
                    bits=$(($bits - 1))
                done

                # Allow zones to reach the internet using the global zone as a router
                echo "map ${iface} $a.$b.$c.$d/$bits -> 0/32" >> /etc/ipf/ipnat.conf
            fi
        fi
    done

    if [[ ${external_started} == "false" ]]; then
        echo "WARNING: external network not brought up (external_nic=${external_nic}, external_ip=${external_ip}, external_netmask=${external_netmask})"
    fi

    # Now the zone vnics. They only need to be defined
    ZONES=`zoneadm list -pi | grep -v "global" | grep installed | cut -d ":" -f 2`
    for zone in ${ZONES}; do
        for vnic in `zonecfg -z ${zone} info net | grep 'physical:' | awk '{ print $2 }'`; do
            # We currently assume vnics that end with 0 should be attached to
            # admin_nic and all other vnics should be attached to external_nic
            if echo ${vnic} | grep "0$"; then
                dladm create-vnic -l ${admin_phys} ${vnic}
            elif [[ ${external_started} == "true" ]] && [[ -n ${external_phys} ]]; then
                # ZONE_public_vlan is defined in the config we sourced earlier
                # (eg. adminui_public_vlan)
                zone_public_vlan=$(eval "echo \${${zone}_public_vlan}")
                zone_public_vlan_opts=
                if [[ -n "${zone_public_vlan}" ]] && [[ "${zone_public_vlan}" != "0" ]]; then
                    zone_public_vlan_opts="-v ${zone_public_vlan}"
                fi

                dladm create-vnic -l ${external_phys} ${zone_public_vlan_opts} ${vnic}
            else
                echo "WARNING: not bringing up vnic '${vnic}' for zone '${zone}' due to misconfiguration."
            fi
        done
    done

else
    # Non-global zones
    for iface in `dladm show-vnic -p -o link`; do
        ifconfig ${iface} plumb
        if [[ -f /etc/dhcp.${iface} || ! -f /etc/hostname.${iface} ]]; then
            ifconfig ${iface} dhcp
        else
            ifconfig ${iface} inet `cat /etc/hostname.${iface}` up
        fi
    done
fi

# Any non-loopback IPv4 interfaces with usable addresses up?
if [[ -n "`/sbin/ifconfig -a4u`" ]]; then
    	/sbin/ifconfig -a4u | while read intf addr rest; do
		[[ ${intf} == "inet" ]] && [[ ${addr} != "127.0.0.1" ]] &&
		[[ ${addr} != "0.0.0.0" ]] && exit ${SMF_EXIT_OK}
	done && exit ${SMF_EXIT_OK}
fi

# Any DHCP interfaces started?
[[ -n "`/sbin/ifconfig -a4 dhcp status 2>/dev/null`" ]] && exit ${SMF_EXIT_OK}

# Any non-loopback IPv6 interfaces up?
if [[ -n "`/sbin/ifconfig -au6`" ]]; then
	/sbin/ifconfig -au6 | while read intf addr rest; do
		[[ ${intf} = "inet6" ]] && [[ ${addr} != "::1/128" ]] && exit ${SMF_EXIT_OK}
	done && exit ${SMF_EXIT_OK}
fi

# This service was supposed to configure something yet didn't.  Exit
# with config error.
exit ${SMF_EXIT_ERR_CONFIG}
