#!/bin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License, Version 1.0 only
# (the "License").  You may not use this file except in compliance
# with the License.
#
# You can obtain a copy of the license at COPYING
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at COPYING.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright (c) 2010 Joyent Inc.


. /lib/svc/share/smf_include.sh
. /lib/svc/share/fs_include.sh

# first of all, if we aren't the global zone this doesn't make any sense to run

smf_is_globalzone || exit $SMF_EXIT_OK

# Need to run syseventd now because it talks to devfs to create /dev/dsk
# so that we can try to import the zpool.
/usr/lib/sysevent/syseventd

# If the zpool doesn't exist, then there's nothing to mount.
zpool import -f zones
if [ $? -eq 0 ]; then
        mkdir /usbkey
        mount -F zfs zones/var /var
        mount -F zfs zones/config /etc/zones
        mount -F zfs zones/opt /opt
        mount -F zfs zones/usbkey /usbkey
    swap -a /dev/zvol/dsk/zones/swap
	dumpadm -y -d /dev/zvol/dsk/zones/dump
fi

USBMOUNTPOINT=`svcprop -p "joyentfs/usb_mountpoint" ${SMF_FMRI}`
COPYINPOINT=`svcprop -p "joyentfs/usb_copy_path" ${SMF_FMRI}`
DEBUG=`svcprop -p "joyentfs/debug" ${SMF_FMRI}`

mount_usb_msg=""

if [[ -f "${USBMOUNTPOINT}/.joyliveusb" ]]; then
    mount_usb_msg="already mounted"
    
    zpool list | grep zones
    if [[ $? == 0 ]]; then
        rm -rf ${COPYINPOINT}/*;
        cp -r ${USBMOUNTPOINT}/* ${COPYINPOINT}
        return $?
    fi
    return 0;
fi

# First thing to do is to mount the USB key / VMWare disk
USBKEYS=`/usr/bin/disklist -r`
for key in ${USBKEYS}; do
    if [[ `/usr/sbin/fstyp /dev/dsk/${key}p0:1` == 'pcfs' ]]; then
        /usr/sbin/mount -F pcfs /dev/dsk/${key}p0:1 ${USBMOUNTPOINT};
        if [[ $? == "0" ]]; then
            if [[ ! -f ${USBMOUNTPOINT}/.joyliveusb ]]; then
                if [[ ${DEBUG} == "true" ]]; then
                    mount_usb_msg="${mount_usb_msg}\n[debug] didn't find ${USBMOUNTPOINT}/.joyliveusb on pcfs /dev/dsk/${key}p0:1"
                fi
                /usr/sbin/umount ${USBMOUNTPOINT};
            else
                if [[ ${DEBUG} == "true" ]]; then
                    mount_usb_msg="${mount_usb_msg}\n[debug] found ${USBMOUNTPOINT}/.joyliveusb on pcfs /dev/dsk/${key}p0:1"
                fi
                break;
            fi
        elif [[ ${DEBUG} == "true" ]]; then
            mount_usb_msg="${mount_usb_msg}\n[debug] mount failed for pcfs /dev/dsk/${key}p0:1"
        fi
    elif [[ ${DEBUG} == "true" ]]; then
        mount_usb_msg="${mount_usb_msg}\n[debug] /dev/dsk/${key}p0:1 is not pcfs"
    fi
done

if [[ ! -f "${USBMOUNTPOINT}/.joyliveusb" ]]; then
    # we're probably VMWare, so we're looking at a non-USB disk.
    for disk in `/usr/bin/disklist -a`; do
        if [[ `/usr/sbin/fstyp /dev/dsk/${disk}p1` == 'pcfs' ]]; then
            /usr/sbin/mount -F pcfs /dev/dsk/${disk}p1 ${USBMOUNTPOINT};
            if [[ $? == "0" ]]; then
                if [[ ! -f ${USBMOUNTPOINT}/.joyliveusb ]]; then
                    if [[ ${DEBUG} == "true" ]]; then
                        mount_usb_msg="${mount_usb_msg}\n[debug] didn't find ${USBMOUNTPOINT}/.joyliveusb on pcfs /dev/dsk/${disk}p1"
                    fi
                    /usr/sbin/umount ${USBMOUNTPOINT};
                else
                    if [[ ${DEBUG} == "true" ]]; then
                        mount_usb_msg="${mount_usb_msg}\n[debug] found ${USBMOUNTPOINT}/.joyliveusb on pcfs /dev/dsk/${disk}p1"
                    fi
                    break;
                fi
            elif [[ ${DEBUG} == "true" ]]; then
                mount_usb_msg="${mount_usb_msg}\n[debug] unable to mount /dev/dsk/${disk}p1"
            fi
        elif [[ ${DEBUG} == "true" ]]; then
            mount_usb_msg="${mount_usb_msg}\n[debug] /dev/dsk/${disk}p1 is not pcfs"
        fi
    done
fi

if [[ -f "${USBMOUNTPOINT}/.joyliveusb" ]]; then
    mount_usb_msg="success"
    
    zpool list | grep zones

    if [[ $? == 0 ]]; then
        rm -rf ${COPYINPOINT}/*;
        cp -r ${USBMOUNTPOINT}/* ${COPYINPOINT}
    fi

    return 0;
fi

mount_usb_msg="${mount_usb_msg}\n[FATAL] mount_usb(): could not find USB Key"
return 1;