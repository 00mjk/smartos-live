/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright 2015, Joyent, Inc.
 *
 * Vminfod Client and EventStream class
 */

var http = require('http');
var stream = require('stream');
var os = require('os');
var util = require('util');

var assert = require('/usr/node/node_modules/assert-plus.js');
var bunyan = require('/usr/node/node_modules/bunyan');
var LineStream = require('/usr/node/node_modules/linestream.js');

module.exports = VminfodClient;
module.exports.VminfodClient = VminfodClient;
module.exports.VminfodEventStream = VminfodEventStream;

var log = bunyan.createLogger({
    level: 'debug',
    name: 'vminfod/client',
    streams: [
    {
        stream: process.stderr,
        level: 'debug'
    }
    ],
    serializers: bunyan.stdSerializers
});

/*
 * VminfodClient class
 */
function VminfodClient(opts) {
    var self = this;

    opts = opts || {};
    if (typeof (opts) === 'string')
        opts = {name: opts};

    var _log = opts.log || log;

    self.vc_host = opts.host || '127.0.0.1';
    self.vc_port = opts.port || 9090;
    self.vc_name = opts.name || _log.fields.name;
    self.vc_logger = _log.child({client: self.vc_name});
}

/*
 * Perform a GET request to the Vminfod daemon.
 *
 * @param {Object|String} opts - options to pass to http.request, if this is a
 *                               string it is used as opts.path (the endpoint)
 * @param {Function} cb - callback of signature cb(err, data)
 *   - err - any possible error, including non-200 statusCode or failure to
 *           parse JSON response
 *   - data - the JSON.parse'd data returned from the server
 * @return {HTTPRequest} req - the HTTP request object
 */
VminfodClient.prototype.get = function get(opts, cb) {
    var self = this;

    if (typeof (opts) === 'string')
        opts = {path: opts};
    assert.object(opts, 'opts');

    var reqOpts = {
        host: self.vc_host,
        port: self.vc_port,
        method: 'GET',
        headers: {
            'user-agent': makeUserAgent(self.vc_name)
        }
    };
    Object.keys(opts).forEach(function (key) {
        reqOpts[key] = opts[key];
    });

    var req = http.request(reqOpts, function (res) {
        if (res.statusCode !== 200) {
            var err = new Error('bad statusCode: ' + res.statusCode);
            err.code = err.statusCode = res.statusCode;
            res.destroy();
            cb(err);
            return;
        }

        res.setEncoding('utf8');
        var body = '';
        res.on('readable', function () {
            var chunk;
            while ((chunk = res.read()) !== null)
                body += chunk;
        });
        res.on('end', function () {
            try {
                var d = JSON.parse(body);
                cb(null, d);
            } catch (e) {
                cb(e);
            }
        });
    });
    req.on('error', function (e) {
        cb(e);
        req.destroy();
    });
    req.end();
    return req;
};

/*
 * shortcuts for common endpoints, eqivalent to:
 *   get('/status', cb), get('/vms', cb), etc.
 */
['ping', 'status', 'vms', 'data'].forEach(function (s) {
    VminfodClient.prototype[s] = function (opts, cb) {
        if (typeof (opts) === 'function') {
            cb = opts;
            opts = {};
        }
        opts.path = '/' + s;
        return this.get(opts, cb);
    };
});

/*
 * Get a information for a specific vm given the zonename
 *
 * @param {String} zonename - the zonename (UUID most likely)
 * @param {Function} cb - same signature and usage as .get()
 */
VminfodClient.prototype.vm = function vm(zonename, cb) {
    var endpoint = '/vms/' + encodeURIComponent(zonename);
    return this.get(endpoint, cb);
};

/*
 * Return a new VminfodEventStream using the options
 * given to create this VminfodClient
 */
VminfodClient.prototype.createEventStream =
    function createEventStream(opts) {
    opts = opts || {};
    if (typeof (opts) === 'string')
        opts = {name: opts};
    opts.host = opts.host || this.vc_host;
    opts.port = opts.port || this.vc_port;
    opts.log = opts.log || this.vc_logger;
    opts.name = opts.name || this.vc_name;
    return new VminfodEventStream(opts);
};

/*
 * Create a new vminfod stream by creating a persistent HTTP request to vminfod
 *
 */
function VminfodEventStream(opts) {
    var self = this;

    opts = opts || {};
    if (typeof (opts) === 'string')
        opts = {name: opts};

    // become a transform stream
    stream.Transform.call(self, {objectMode: true});

    var _log = opts.log || log;

    // process opts
    self.vs_host = opts.host || '127.0.0.1';
    self.vs_port = opts.port || 9090;
    self.vs_name = opts.name || _log.fields.name;
    self.vs_logger = _log.child({client: self.vs_name});
    self.start();
}
util.inherits(VminfodEventStream, stream.Transform);

/*
 * start the stream by opening a persistent HTTP connection
 */
VminfodEventStream.prototype.start = function start(opts) {
    var self = this;

    opts = opts || {};

    assert.ok(!self.vs_req, 'VminfodEventStream already started');

    var reqOpts = {
        host: self.vs_host,
        port: self.vs_port,
        method: 'GET',
        path: '/events',
        headers: {
            'user-agent': makeUserAgent(self.vs_name)
        }
    };
    Object.keys(opts).forEach(function (key) {
        reqOpts[key] = opts[key];
    });

    self.vs_req = http.request(reqOpts, function (res) {
        var e;
        if (res.statusCode !== 200) {
            e = new Error('bad statusCode: ' + res.statusCode);
            e.code = res.statusCode;
            res.destroy();
            self.vs_logger.error({err: e}, '%s', e.message);
            self.emit('error', e);
            return;
        }

        var ls = new LineStream();
        res.pipe(ls).pipe(self);
        res.on('end', function () {
            if (self.vs_req) {
                e = new Error('VminfodEventStream ended prematurely');
                self.vs_logger.error({err: e}, '%s', e.message);
                self.emit('error', e);
                return;
            }
        });
    });
    self.vs_req.setTimeout(0);
    self.vs_req.end();

    return self.vs_req;
};

/*
 * the transform method to process http body-by-line
 */
VminfodEventStream.prototype._transform =
function _transform(chunk, encoding, cb) {
    var line = chunk.toString('utf8');
    var ev;
    try {
        ev = JSON.parse(line);
        ev.ts = new Date(ev.ts);
    } catch (e) {
        // any JSON parse failure is a fatal error
        this.vs_logger.error({err: e, line: line},
            'failed to parse output line');
        this._abort();
        return;
    }

    if (ev.type === 'ack') {
        // this is less-than-ideal, but because vminfod pre-serializes
        // vm data to cut down on the number of calls to JSON.stringify
        // required, we have to JSON.parse the vms property, as its been
        // serialized twice
        ev.vms = JSON.parse(ev.vms);
        this.emit('ready', ev);
    } else {
        this.push(ev);
    }
    cb();
};

/*
 * cleanly stop the VminfodEventStream by destroying the request
 */
VminfodEventStream.prototype.stop = function stop() {
    if (this.vs_req) {
        this.vs_req.destroy();
        this.vs_req = null;
    }
};

/*
 * same as above, but emit an error
 */
VminfodEventStream.prototype._abort = function _abort() {
    this.stop();
    var e = new Error('VminfodEventStream aborted');
    this.emit('error', e);
};

/*
 * watch for a specific event (with an optional timeout), and
 * optionally teardown the stream when it is received
 */
VminfodEventStream.prototype.watchForEvent =
function watchForEvent(obj, opts, cb) {
    var self = this;
    var events = [];
    var timeout;
    var isDone = false;

    if (typeof (opts) === 'function') {
        cb = opts;
        opts = {};
    }
    assert.object(obj, 'obj');
    assert.object(opts, 'opts');
    assert.optionalNumber(opts.timeout, 'opts.timeout');
    assert.optionalBool(opts.teardown, 'opts.teardown');
    assert.optionalBool(opts.catchErrors, 'opts.catchErrors');
    assert.optionalArrayOfObject(opts.events, 'opts.events');
    assert.func(cb, 'cb');

    if (opts.timeout) {
        timeout = setTimeout(function () {
            isDone = true;
            self.stop();
            self.vs_logger.error({obj: obj, events: events},
                'vminfod watchForEvent timeout exceeded - unmatched events');
            var e = new Error('timeout exceeded');
            e.code = 'ETIMEOUT';
            cb(e);
        }, opts.timeout);
    }

    self.vs_logger.trace({obj: obj},
        'beginning watch for vminfod event');
    self.on('readable', readable);
    function readable() {
        var ev;
        while ((ev = self.read()) !== null) {
            processevent(ev);
        }
    }

    (opts.events || []).forEach(function (ev) {
        processevent(ev);
    });

    function processevent(ev) {
        if (isDone)
            return;

        events.push(ev);

        if (!objSameValues(obj, ev))
            return;

        self.vs_logger.trace({obj: obj}, 'matched vminfod event');
        done(null, ev);
    }

    function onerror(e) {
        self.vs_logger.error({err: e}, 'vminfod stream error');
        done(e);
    }
    if (opts.catchErrors) {
        self.on('error', onerror);
    }

    function done(err, o) {
        if (timeout) {
            clearTimeout(timeout);
            timeout = null;
        }
        if (opts.teardown || (opts.catchErrors && err)) {
            self.stop();
        }
        if (opts.catchErrors) {
            self.removeListener('error', onerror);
        }
        self.removeListener('readable', readable);
        isDone = true;
        cb(err, o);
    }

    return timeout;
};

/*
 * watch for one or more changes (with an optional timeout), and
 * optionally teardown the stream when it is received
 */
VminfodEventStream.prototype.watchForChanges =
function watchForChanges(obj, changes, opts, cb) {
    var self = this;
    var timeout;
    var events = [];
    var isDone = false;

    if (typeof (opts) === 'function') {
        cb = opts;
        opts = {};
    }
    assert.object(obj, 'obj');
    assert.arrayOfObject(changes, 'changes');
    assert.object(opts, 'opts');
    assert.optionalNumber(opts.timeout, 'opts.timeout');
    assert.optionalBool(opts.teardown, 'opts.teardown');
    assert.optionalBool(opts.catchErrors, 'opts.catchErrors');
    assert.optionalBool(opts.firstMatch, 'opts.firstMatch');
    assert.optionalArrayOfObject(opts.events, 'opts.events');
    assert.func(cb, 'cb');

    var total = changes.length;

    if (total === 0) {
        done();
        return;
    }

    if (opts.timeout) {
        timeout = setTimeout(function () {
            isDone = true;
            self.stop();
            self.vs_logger.error({changes: changes, events: events},
                'vminfod watchForChanges timeout exceeded - unmatched events');
            var e = new Error('timeout exceeded');
            e.code = 'ETIMEOUT';
            cb(e);
        }, opts.timeout);
    }

    self.vs_logger.trace({changes: changes},
        'beginning watch for vminfod changes');

    self.on('readable', readable);
    function readable() {
        var ev;
        while ((ev = self.read()) !== null) {
            processevent(ev);
        }
    }

    (opts.events || []).forEach(function (ev) {
        processevent(ev);
    });

    function processevent(ev) {
        if (isDone)
            return;

        // filter out events that don't match our predicate (obj)
        if (!objSameValues(obj, ev))
            return;

        self.vs_logger.trace({ev: ev},
            'inspecting possible match from vminfod');

        // loop changes found from vminfod
        (ev.changes || []).forEach(function (change) {

            // compare to changes we are looking for.
            // we return false to remove the item from the changes
            // array (meaning we matched it) or true to keep it in
            // the array (it was not a match)
            changes = changes.filter(function (wantedArr) {
                if (isDone)
                    return false;

                if (!Array.isArray(wantedArr))
                    wantedArr = [wantedArr];

                for (var i = 0; i < wantedArr.length; i++) {
                    var match;

                    var wanted = wantedArr[i];
                    var originalWantedPath = wanted.path.slice(0);

                    // certain keys (like "reslovers") need to be checked
                    // against the entire vmobj, not a specific changeset
                    if (wanted.path[0] === 'resolvers') {
                        match = objSameValues(wanted.to,
                            ev.vm[wanted.path]);
                    } else {
                        var wantedPath = wanted.path;
                        var changePath = change.path;

                        // we skip this change if the path of the wanted
                        // variable doesn't match
                        if (wantedPath.length !== changePath.length)
                            continue;

                        // check each part of the "path" match
                        match = true;
                        for (var j = 0; j < wantedPath.length; j++) {
                            var wantedPart = wantedPath[j];
                            var changePart = changePath[j];
                            if (!(wantedPart === null
                                || wantedPart === changePart)) {
                                match = false;
                                break;
                            }
                        }
                        if (!match)
                            continue;

                        // compare the event fire to the event we want,
                        // omitting the "path" variable as it was checked
                        // above
                        delete wanted.path;
                        match = objSameValues(wanted, change);
                        wanted.path = originalWantedPath;
                    }

                    if (match) {
                        // we matched, this change will be removed from the
                        // array
                        self.vs_logger.trace({change: change, match: match},
                            'vminfod change match');
                        if (opts.firstMatch) {
                            self.vs_logger.trace('first match met');
                            isDone = true;
                        }

                        return false;
                    }
                }

                // if we get here, the event didn't match any of the
                // changes wanted so we keep the change and try again
                // when a new event is received. we also push the event
                // onto the "events" array to be logged later if the
                // changes are never satisified for debugging purposes
                events.push(change);
                return true;
            });
        });

        if (isDone)
            changes.length = 0;

        self.vs_logger.debug({remaining: changes.length, total: total},
            '%d/%d changes remaining', changes.length, total);

        if (changes.length === 0) {
            // no more changes to wait for, we're done!
            self.vs_logger.trace('vminfod changes done');
            done();
            return;
        }
    }

    function onerror(e) {
        self.vs_logger.error({err: e}, 'vminfod stream error');
        done(e);
    }
    if (opts.catchErrors) {
        self.on('error', onerror);
    }

    function done(err, o) {
        if (timeout) {
            clearTimeout(timeout);
            timeout = null;
        }
        if (opts.teardown || (opts.catchErrors && err)) {
            self.stop();
        }
        if (opts.catchErrors) {
            self.removeListener('error', onerror);
        }
        self.removeListener('readable', readable);
        isDone = true;
        cb(err, o);
    }
};

// check to see that all key=>value pairs in "a" are found in "b"
function objSameValues(a, b) {
    if (!a || typeof (a) !== 'object' || !b || typeof (b) !== 'object')
        return false;

    var match = true;

    Object.keys(a).forEach(function (k) {
        var ak = a[k];
        var bk = b[k];

        if (Array.isArray(ak)) {
            try {
                assert.arrayOfString(ak, 'a.' + k);
                ak = ak.join(',');
            } catch (e) {
            }
        }
        if (Array.isArray(bk)) {
            try {
                assert.arrayOfString(bk, 'b.' + k);
                bk = bk.join(',');
            } catch (e) {
            }
        }

        if (ak !== null && typeof (ak) === 'object') {
            if (!objSameValues(ak, bk))
                match = false;
        } else if (ak !== bk) {
            match = false;
        }
    });

    return match;
}

/*
 * returns true if all arguments given are an empty string
 * or empty array
 */
function isEmptyArrayOrEmptyString(/* args */) {
    var args = Array.prototype.slice.call(arguments);

    for (var i = 0; i < args.length; i++) {
        var arg = args[i];
        if (!((Array.isArray(arg) && arg.length === 0)
            || (typeof (arg) === 'string' && arg === ''))) {
            return false;
        }
    }

    return true;
}

function makeUserAgent(name) {
    return util.format('%s - %s/%d (%s)',
        name || log.name,
        os.hostname(),
        process.pid,
        process.argv[1]);
}

/*
 * if called directly just hook a vminfo stream to stdout
 */
if (require.main === module) {
    var _vs = new VminfodEventStream();
    _vs.on('readable', function () {
        var ev;
        while ((ev = _vs.read()) !== null) {
            console.log(JSON.stringify(ev));
        }
    });
}
