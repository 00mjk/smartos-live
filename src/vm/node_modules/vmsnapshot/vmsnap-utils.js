/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2014, Joyent, Inc. All rights reserved.
 *
 */

var assert = require('assert');

/*
 * This function gets a list of datasets for a VM on which there could be
 * snapshots.
 *
 * It requires that vmobj have at least the following properties:
 *
 *  brand
 *  disks (for KVM)
 *  datasets (for non-KVM)
 *  zfs_filesystem
 *  zonepath
 *
 * callback(error, datasets) will be called on completion. If successful, the
 * error parameter will be null and datasets will be an array. If this function
 * encounters an error, the error parameter will be an Error object and datasets
 * will be undefined.
 *
 */
function getSnapshotable(vmobj, options, callback)
{
    var datasets = [];
    var log = options.log;

    assert(options.log, 'missing log option to getSnapshotable()');

    // Ensure we have all the fields we use
    [
        'brand',
        'zfs_filesystem',
        'zonepath'
    ].forEach(function _checkGetSnapshotableVmobj(prop) {
        assert(vmobj.hasOwnProperty(prop), 'vmobj missing property: ' + prop);
    });

    // add zoneroot
    datasets.push(vmobj.zfs_filesystem);

    // XXX TODO: check brand property instead
    // important: this also ensures datasets,disks: keep that.
    if (vmobj.brand === 'kvm') {
        assert(vmobj.hasOwnProperty('disks'), 'vmobj missing "disks"');
        vmobj.disks.forEach(function _checkGetSnapshotableDisk(disk) {
            assert(disk.zfs_filesystem, 'disk missing zfs_filesystem: '
                + JSON.stringify(disk));
            datasets.push(disk.zfs_filesystem);
        });
    } else {
        assert(Array.isArray(vmobj.datasets), 'vmobj missing "datasets"');
    }

    /*
     * Add datasets if they're attached, regardless of brand. This will include
     * any delegated datasets.
     */
    if (Array.isArray(vmobj.datasets) && vmobj.datasets.length > 0) {
        datasets = datasets.concat(vmobj.datasets);
    }

    callback(null, datasets);
}

module.exports = {
    getSnapshotable: getSnapshotable
};
