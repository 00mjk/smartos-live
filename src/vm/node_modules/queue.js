/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2014, Joyent, Inc. All rights reserved.
 *
 */

var Queue = module.exports = function (opts) {
    var self = this;

    if (!opts) {
        opts = {};
    }

    // jobs are queued in channels
    self.channels = {};

    // the number of concurrent jobs
    self.workers = (opts.workers === undefined) ? 1 : opts.workers;

    // lock to prevent workers from running
    self.paused = (opts.paused === undefined) ? false : opts.paused;

    // array of callbacks once we have confirmed pause
    self.pause_callbacks = [];

    // a timestamp
    self.stop_at = undefined;

    // array of callbacks once we have confirmed fast forwarded
    self.ff_callbacks = [];

    self.work = function (id) {
        var channel;
        var job;

        if (id === undefined) {
            id = 'global';
        }

        // queue is paused and we're not fast-forwarding
        if (self.paused === true && self.stop_at === undefined) {
            return;
        }

        // make sure we have a channel with that id
        if (!self.channels.hasOwnProperty(id)) {
            return;
        }

        // get the channel
        channel = self.channels[id];

        // no jobs to work
        if (channel.jobs.length === 0) {
            return;
        }

        // max concurrency
        if (channel.working === self.workers) {
            return;
        }

        job = channel.jobs.shift();

        // we've fast-forwarded
        if (self.stop_at !== undefined) {
            if (job.created_at > self.stop_at) {
                // add the job back
                channel.jobs.unshift(job);
                return;
            }
        }

        // increment the working count
        channel.working++;

        job.work(function () {
            // decrement working count
            channel.working--;

            // run the original callback, passing along the arguments
            job.callback.apply(null, arguments);

            // checkPaused if nothing is working
            if (channel.working === 0) {
                self.checkPaused();
            }

            // checkFastForwarded if nothing is working
            if (channel.working === 0) {
                self.checkFastForwarded();
            }

            // remove the channel if there's nothing left to do
            if (channel.jobs.length === 0) {
                delete (self.channels)[id];
            }

            process.nextTick(function () {
                self.work(id);
            });
        });
    };

    self.checkPaused = function () {
        var id;

        if (self.paused !== true) {
            return;
        }

        for (id in self.channels) {
            if (self.channels[id].working > 0) {
                // something is still working
                return;
            }
        }

        self.pause_callbacks.forEach(function (cb) {
            cb();
        });
    };

    self.checkFastForwarded = function () {
        var id;
        var i;

        if (self.stop_at === undefined) {
            return;
        }

        for (id in self.channels) {
            if (self.channels[id].working > 0) {
                // something is still working
                return;
            }

            for (i = 0; i < self.channels[id].jobs.length; i++) {
                if (self.channels[id].jobs[i].created_at < self.stop_at) {
                    // something still needs to work
                    return;
                }
            }
        }

        self.ff_callbacks.forEach(function (cb) {
            cb();
        });
    };

    return (self);
};

Queue.prototype.enqueue = function (id, job, callback) {
    var self = this;
    var channel;

    // the arguments are pretty flexible, let's adjust them now
    if (arguments.length === 1) {
        job = id;
        id = 'global';
        callback = function () {};
    } else if (arguments.length === 2) {
        if (typeof (id) === 'function') {
            callback = job;
            job = id;
            id = 'global';
        } else {
            callback = function () {};
        }
    }

    // create the channel if it doesn't exist
    if (!self.channels.hasOwnProperty(id)) {
        self.channels[id] = {
            jobs: [],
            working: 0
        };
    }

    channel = self.channels[id];

    channel.jobs.push({
        created_at: (new Date()).toISOString(),
        work: job,
        callback: callback
    });

    process.nextTick(function () {
        self.work(id);
    });
};

Queue.prototype.pause = function (callback) {
    var self = this;
    self.paused = true;
    self.pause_callbacks.push(callback);
    self.checkPaused();
};

Queue.prototype.resume = function () {
    var self = this;
    self.paused = false;
    self.stop_at = undefined;
    self.pause_callbacks = [];
    self.ff_callbacks = [];

    Object.keys(self.channels).forEach(function (id) {
        self.work(id);
    });
};

Queue.prototype.fastForward = function (timestamp, callback) {
    var self = this;
    if (self.paused !== true) {
        callback(new Error('cannot fastForward a queue that is not paused'));
        return;
    }

    self.stop_at = timestamp;
    self.ff_callbacks.push(callback);
    self.checkFastForwarded();
};
