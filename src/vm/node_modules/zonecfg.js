/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright 2017, Joyent, Inc.
 *
 * Zonecfg wrapper with a per-zone lock
 */

var cp = require('child_process');
var util = require('util');

var assert = require('/usr/node/node_modules/assert-plus');
var lock = require('/usr/vm/node_modules/locker').lock;
var vasync = require('/usr/vm/node_modules/vasync');

var LOCK_PATH = '/var/run/vm.%s.zonecfg.lockfile';

module.exports = zonecfg;

function zonecfg(id, args, opts, cb) {
    assert.uuid(id, 'id');
    assert.arrayOfString(args, 'args');
    assert.object(opts, 'opts');
    assert.object(opts.log, 'opts.log');
    assert.optionalString(opts.stdin, 'opts.stdin');
    assert.optionalBool(opts.useZonename, 'opts.useZonename');
    assert.func(cb, 'cb');

    var cmd = 'zonecfg';
    var file = util.format(LOCK_PATH, id);
    var child;
    var unlock;
    var execOpts = {
        encoding: 'utf8'
    };
    var ret = {};
    var log = opts.log.child({cmd: cmd, args: args, file: file});

    vasync.pipeline({funcs: [
        function (_, cb2) {
            // acquire lock
            log.debug('acquiring lock %s', file);

            lock(file, function (err, _unlock) {
                if (err) {
                    log.error({err: err}, 'failed to acquire lock %s', file);
                    cb2(err);
                    return;
                }

                log.debug('acquired lock %s', file);

                unlock = _unlock;
                cb2();
            });
        }, function (_, cb2) {
            log.debug('calling %s', cmd);

            child = cp.execFile(cmd, args, execOpts,
                function (err, stdout, stderr) {

                ret.stderr = stderr;
                ret.stdout = stdout;

                if (err) {
                    log.error({err: err}, '%s call failed', cmd);
                    cb2(err);
                    return;
                }

                log.debug({ret: ret}, '%s ran successfully', cmd);
                cb2();
            });

            if (opts.stdin !== undefined) {
                log.debug({stdin: opts.stdin}, 'writing to stdin');
                child.stdin.write(opts.stdin);
                child.stdin.end();
            }
        }
    ]}, function (err) {
        if (unlock) {
            unlock(done);
        } else {
            done();
        }

        function done() {
            cb(err, ret);
        }
    });
}
