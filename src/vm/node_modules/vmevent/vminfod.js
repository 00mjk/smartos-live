/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2014, Joyent, Inc. All rights reserved.
 *
 */

var assert = require('assert');
var async = require('/usr/node/node_modules/async');
var bunyan = require('/usr/node/node_modules/bunyan');
var cp = require('child_process');
var EventEmitter = require('events').EventEmitter;
var FsWatcher = require('vmevent/fswatcher').FsWatcher;
var fs = require('fs');
var getZoneData = require('/usr/vm/node_modules/vmload').getZoneData;
var path = require('path');
var spawn = cp.spawn;
var http = require('http');
var qs = require('querystring');
var url = require('url');
var ZoneWatcher = require('vmevent/zonewatcher').ZoneWatcher;
var ZpoolWatcher = require('vmevent/zpoolwatcher').ZpoolWatcher;

var log = bunyan.createLogger({
    level: 'trace',
    name: 'vminfod',
    streams: [ { stream: process.stderr, level: 'trace' } ],
    serializers: bunyan.stdSerializers
});

var event_queue;
var fsw;
var vm_data;
var zoneevent;
var zpoolevent;

var LISTEN_SOCKET = '/var/run/vminfod.sock';

var CONFIG_FILES = [
    'metadata.json',
    'routes.json',
    'tags.json'
];

function handleFsEvent(obj) {
    console.log('FS: ' + JSON.stringify(obj));
}

function handleZoneEvent(obj) {
    console.log('ZONE: ' + JSON.stringify(obj));
}

function handleZpoolEvent(obj) {
    console.log('ZPOOL: ' + JSON.stringify(obj));
}

function startWatchers(callback) {
    async.series([
        function (cb) {
            fsw = new FsWatcher({log: log, dedup_ns: 2000000000});

            fsw.on('all', handleFsEvent);
            fsw.once('ready', function (obj) {
                cb();
            });

            fsw.start();
        }, function (cb) {
            fsw.watch('/etc/zones', cb);
        }, function (cb) {
            fsw.watch('/tmp/.sysinfo.json', cb);
        }, function (cb) {
            zonew = new ZoneWatcher({log: log});

            zonew.on('all', handleZoneEvent);
            zonew.once('ready', function (obj) {
                cb();
            });

            zonew.start();
        }, function (cb) {
            zpoolw = new ZpoolWatcher({log: log});

            zpoolw.on('all', handleZpoolEvent);
            zpoolw.once('ready', function (obj) {
                cb();
            });

            zpoolw.start();
        }
    ], function (err) {
        callback(err);
    });
}

/*
 *
 *  zoneobj will look like:
 *
 *    {
 *     "zoneid": 1,
 *     "zonename": "5e9d36e3-c597-4b8e-8a51-55a7af9b8ac6",
 *     "state": "running",
 *     "zonepath": "/zones/5e9d36e3-c597-4b8e-8a51-55a7af9b8ac6",
 *     "uuid": "5e9d36e3-c597-4b8e-8a51-55a7af9b8ac6",
 *     "brand": "joyent-minimal",
 *     "ip_type": "excl"
 *   },
 */
function addVMFsWatches(zoneobj)
{
    var zonename = zoneobj.zonename;

    function watch(pathname) {
        fsw.watch(pathname, function (err) {
            if (err) {
                log.warn(err, 'failed to setup watch');
                return;
            }
            log.debug('now watching ' + pathname);
        });
    }

    watch('/etc/zones/' + zonename + '.xml');

    CONFIG_FILES.forEach(function (f) {
        watch('/zones/' + zonename + '/config/' + f);
    });
}

function handleGet(c, args, response)
{
    log.debug('GET (' + JSON.stringify(c) + ') len: ' + c.length);

    switch (c[0]) {
    case 'data':
    case 'cache':
        // return the cache object
        response.writeHead(200, { 'Content-Type': 'application/json'});
        response.end(JSON.stringify(vm_data, null, 2), 'utf-8');
        break;
    case 'vms':
        if (c.length === 2) {
            // requesting a vmobj with uuid
            var uuid = c[1];
        } else {
            // requesting the vmobj list
        }
        break;
    default:
        response.writeHead(404, { 'Content-Type': 'application/json'});
        response.write('Unsupported URL Path');
        response.end();
        break;
    }
}

function startHTTPHandler()
{
    var handler = function (request, response) {
        var args;
        var c;
        var url_parts;

        url_parts = url.parse(request.url, true);
        c = url_parts.pathname.split('/');

        // remove empty /'s from front/back
        while (c.length > 0 && c[0].length === 0) {
            c.shift();
        }
        while (c.length > 0 && c[c.length - 1].length === 0) {
            c.pop();
        }

        // we might need args for filtering vmobjs... maybe
        if (url_parts.hasOwnProperty('query')) {
            args = url_parts.query;
            log.debug('url ' + request.url);
            log.debug('args ' + JSON.stringify(args));
        } else {
            args = {};
        }

        if (request.method !== 'GET') {
            // Bad request
            response.writeHead(400, {'Content-Type': 'application/json'});
            response.end();
        } else {
            handleGet(c, args, response);
        }
    };

    log.debug('LISTENING ON ' + LISTEN_SOCKET);
    // http.createServer(handler).listen(LISTEN_SOCKET);
    // temporarily for testing with curl
    http.createServer(handler).listen(9090, '127.0.0.1');
}

function main() {

    async.series([
        startWatchers,
        function (cb) {
            getZoneData(null, {log: log}, function (err, cache) {
                vm_data = cache;
                console.log('initial vm_data: ' + JSON.stringify(vm_data, null, 2));
                cb();
            });
        }, function (cb) {
            var vms = Object.keys(vm_data.zoneadm_objects);

            // XXX is this zonename or uuid?
            vms.forEach(function (zonename) {
                addVMFsWatches(vm_data.zoneadm_objects[zonename]);
            });
            cb();
        }, startHTTPHandler
    ], function (err) {
        console.error('XXX DONE');
    });
}

main();


/*
 * TODO:
 *
 * events to a queue?
 * watch for dladm changes for vnics
 * watch for rctl changes
 *
 */

