/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2014, Joyent, Inc. All rights reserved.
 *
 */

exports = module.exports = Queue;

function Queue(opts) {
    if (!opts) {
        opts = {};
    }

    // the set of jobs, indexed by timestamp
    this.jobs = {};

    // the number of jobs currently being worked
    this.working = 0;

    // the number of concurrent jobs
    this.workers = (opts.workers === undefined) ? 1 : opts.workers;

    // lock to prevent workers from running
    this.paused = (opts.paused === undefined) ? false : opts.paused;

    // array of callbacks once we have confirmed pause
    this.pause_callbacks = [];

    // a timestamp
    this.stop_at = undefined;

    // array of callbacks once we have confirmed fast forwarded
    this.ff_callbacks = [];

    return (this);
}

Queue.prototype.enqueue = function (job, callback) {
    var self = this;
    var key;

    if (callback === undefined) {
        callback = function () {};
    }

    key = (new Date()).toISOString();

    this.jobs[key] = {
        work: job,
        callback: callback
    };

    process.nextTick(function () {
        self.work();
    });
};

Queue.prototype.work = function () {
    var self = this;
    var key;
    var job;

    // queue is paused and we're not fast-forwarding
    if (this.paused === true && this.stop_at === undefined) {
        return;
    }

    // no jobs to work
    if (Object.keys(this.jobs).length === 0) {
        return;
    }

    // max concurrency
    if (this.working === this.workers) {
        return;
    }

    // since the keys are a timestamp, sort the keys and return
    // the first item to get the oldest.
    key = Object.keys(this.jobs).sort()[0];

    // we've fast-forwarded
    if (this.stop_at !== undefined) {
        if (key > this.stop_at) {
            return;
        }
    }

    job = this.jobs[key];

    // increment the working count
    this.working++;

    job.work(function () {
        // decrement working count
        self.working--;

        // run the original callback, passing along the arguments
        job.callback.apply(null, arguments);

        // delete the job
        delete (self.jobs)[key];

        // checkPaused if nothing is working
        if (self.working === 0) {
            self._checkPaused();
        }

        // checkFastForwarded if nothing is working
        if (self.working === 0) {
            self._checkFastForwarded();
        }

        process.nextTick(function () {
            self.work();
        });
    });
};

Queue.prototype.pause = function (callback) {
    this.paused = true;
    this.pause_callbacks.push(callback);
    this._checkPaused();
};

Queue.prototype.resume = function () {
    this.paused = false;
    this.stop_at = undefined;
    this.pause_callbacks = [];
    this.ff_callbacks = [];

    this.work();
};

Queue.prototype.fastForward = function (timestamp, callback) {
    if (this.paused !== true) {
        callback(new Error('cannot fastForward a queue that is not paused'));
        return;
    }

    this.stop_at = timestamp;
    this.ff_callbacks.push(callback);
    this._checkFastForwarded();
};

Queue.prototype._checkPaused = function () {
    if (this.paused !== true) {
        return;
    }

    if (this.working > 0) {
        // something is still working
        return;
    }

    this.pause_callbacks.forEach(function (cb) {
        cb();
    });
};

Queue.prototype._checkFastForwarded = function () {
    if (this.stop_at === undefined) {
        return;
    }

    if (this.working > 0) {
        // something is still working
        return;
    }
    for (var key in this.jobs) {
        if (key < this.stop_at) {
            // something still needs to work
            return;
        }
    }

    this.ff_callbacks.forEach(function (cb) {
        cb();
    });
};
