/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2014, Joyent, Inc. All rights reserved.
 *
 */

/*
 * Public interface
 */

exports = module.exports = Queue;

function Queue(opts) {
    if (!opts) {
        opts = {};
    }

    this.workers = (opts.workers === undefined) ? 1 : opts.workers;
    this.paused = (opts.paused === undefined) ? false : opts.paused;
    this.channels = {};

    return (this);
}

Queue.prototype.enqueue = function (id, job, callback) {
    var channel;
    var self = this;
    var key;


    if (callback === undefined) {
        callback = function () {};
    }

    if (this.channels[id] === undefined) {
        this.channels[id] = {
            jobs: {},
            working: 0
        };
    }

    channel = this.channels[id];
    key = (new Date()).toISOString();

    channel.jobs[key] = {
        work: job,
        callback: callback
    };

    process.nextTick(function () {
        self.work(id);
    });
}

Queue.prototype.work = function (id) {
    var self = this;
    var channel;
    var key;
    var job;


    // queue is paused
    if (this.paused === true) {
        return;
    }

    // channel is empty
    if (this.channels[id] === undefined) {
        return;
    }

    channel = this.channels[id];

    // workers are busy
    if (channel.working === this.workers) {
        return;
    }

    // since the keys are a timestamp, sort the keys and return
    // the first item to get the oldest.
    key = Object.keys(channel.jobs).sort()[0];
    job = channel.jobs[key];


    // increment the working count
    channel.working++;

    job.work(function () {
        // decrement working count
        channel.working--;

        // run the original callback, passing along the arguments
        job.callback.apply(null, arguments);

        // cleanup the channel if there are no more jobs
        if (Object.keys(channel.jobs).length === 0) {
            var context = self.channels;
            delete channels[id];
        }

        process.nextTick(function () {
            self.work(channel);
        });
    });
}

/*
 * todo:
 *   pause/resume will callbacks
 *   resume until timestamp
 */