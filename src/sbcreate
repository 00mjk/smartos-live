#!/bin/bash
#
# Copyright (c) 2011 Joyent Inc., All rights reserved.
#

#
# Since this script is grabbing data from a system in a potentially unknown state
# we don't use 'set -o errexit' here because we don't want to fail to grab other
# data when we fail to grab data from one source.
#

# Need the output dir first.
TEMPDIR=/tmp/sdcsb.$$
LOGFILE=/tmp/sdcsb.$$.log
OUTFILE=/tmp/sdc-support.$(hostname).$(TZ=UTC date "+%Y%m%dT%H%M%SZ").tar.bz2
COUNTDOWN=10

. /lib/sdc/config.sh
load_sdc_config

function do_countdown
{
    echo ""
    echo "This tool will create an SDC support bundle in /tmp."
    echo "This may take some time...  If you wish to abort press CTRL-C now!"
    echo ""
    countdown=$((${COUNTDOWN} - 1))
    while [[ ${countdown} -ge 0 ]]; do
        printf "                                   \r"
        printf "Starting in ${countdown} seconds...\r"
        sleep 1
        countdown=$((${countdown} - 1))
    done
    echo ""
    echo ""
}

function grab_sysinfo
{
    sysinfo > ${TEMPDIR}/sysinfo.json
    echo "  > sysinfo"
}

function grab_dlinfo
{
    dladm show-phys -m > ${TEMPDIR}/dladm.phys
    dladm show-vnic > ${TEMPDIR}/dladm.vnic
    dladm show-linkprop > ${TEMPDIR}/dladm.linkprop
    dladm show-bridge > ${TEMPDIR}/dladm.bridge
    echo "  > datalink info"
}

function grab_ifconfig
{
    ifconfig -a > ${TEMPDIR}/ifconfig.a
    echo "  > network interface info"
}

function grab_routes
{
    netstat -rn > ${TEMPDIR}/netstat.rn
    echo "  > routing table"
}

function grab_auditlog
{
    (cd /var/audit && tar -zcvf ${TEMPDIR}/var.audit.tar.gz .) >&4 2>&1
    echo "  > auditlog info"
}

function grab_svcs
{
    svcs -Z -a > ${TEMPDIR}/svcs.all
    echo "  > services"
    mkdir ${TEMPDIR}/svccfg_archive
    svccfg archive | gzip > ${TEMPDIR}/svccfg_archive/global.gz
    if [[ -d /usbkey/zones ]]; then
        for zone in $(cd /usbkey/zones ; ls); do
            zlogin ${zone} svccfg archive \
            | gzip
            > ${TEMPDIR}/svccfg_archive/${zone}.gz
        done
    fi
}

function grab_ps
{
    ps -efZ > ${TEMPDIR}/ps.efZ
    echo "  > process information"
}

function grab_zfsinfo
{
    zpool status -v > ${TEMPDIR}/zpool.status
    zfs list > ${TEMPDIR}/zfs.list
    echo "  > zfs info"
}

function grab_df
{
    df > ${TEMPDIR}/df
    echo "  > disk utilization"
}

function grab_modinfo
{
    modinfo -w > ${TEMPDIR}/modinfo
    echo "  > module information"
}

function grab_headnode_info
{
    if [[ -d /usbkey ]]; then
        find /usbkey -ls > ${TEMPDIR}/usbkey.filelist
        echo "  > usbkey filelist"
        tar -cvf ${TEMPDIR}/usbkey.config.tar /usbkey/config* >&4
    fi
}

function grab_zoneinfo
{
    zoneadm list -v -c > ${TEMPDIR}/zonelist.vc
    echo "  > zone list"
    zonemon -k > ${TEMPDIR}/zonekstate
    echo "  > zone kernel state"
}

function grab_zoneconfigs
{
    tar -cvf ${TEMPDIR}/zone.configs.tar /etc/zones
    echo "  > zone configs"
}

function grab_zonelogs
{
    tar -zcvf ${TEMPDIR}/zone.logs.tar.gz /zones/*/root/var/svc/log \
        /zones/*/root/opt/smartdc/*/log
    echo "  > zone logs"
}

# XXX how do we limit the data here while still being useful?  Don't want to
# fill up /tmp
function grab_cores
{
    tar -zcvf ${TEMPDIR}/cores.tar.gz /zones/*/cores >&4 2>&1
    echo "  > cores"
}

function grab_dumps
{
    # These are already compressed
    tar -cvf ${TEMPDIR}/dumps.tar /var/crash/volatile >&4 2>&1
    echo "  > kernel crash dumps"
}

function grab_fmdump
{
    fmdump > ${TEMPDIR}/fmdump.out
    fmdump -e > ${TEMPDIR}/fmdump.e.out
    echo "  > fmdump"
}

function grab_logs
{
    tar -zcvf ${TEMPDIR}/gz-logs.tar.gz /var/svc/log /etc/svc/volatile /var/adm >&4 2>&1 || /bin/true
    echo "  > logs"
}

function grab_castatus
{
    if [[ -n ${CONFIG_ca_admin_ip} ]]; then
	curl http://${CONFIG_ca_admin_ip}:23181/ca/admin/status?recurse=true \
	| json > ${TEMPDIR}/ca.status
    fi
}

# Give the user a sanity pause before beginning, this script can
# take some time and write a lot of data.
do_countdown

mkdir ${TEMPDIR}

exec 4>${LOGFILE}
export BASH_XTRACEFD=4
export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o xtrace

echo "==> Gathering System Information"

grab_sysinfo
grab_dlinfo
grab_ifconfig
grab_routes
grab_auditlog
grab_svcs
grab_ps
grab_zfsinfo
grab_df
grab_modinfo
grab_headnode_info
grab_zoneinfo
grab_zoneconfigs
grab_zonelogs
grab_cores
grab_dumps
grab_fmdump
grab_logs
grab_castatus

echo "==> packing data to ${OUTFILE}"
tar -jcvf ${OUTFILE} ${TEMPDIR} >&4 2>&1

echo "==> cleaning up"
rm -rf ${TEMPDIR}
