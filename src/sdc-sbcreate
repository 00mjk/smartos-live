#!/bin/bash
#
# Copyright (c) 2011 Joyent Inc., All rights reserved.
#

#
# Since this script is grabbing data from a system in a potentially unknown
# state we don't use 'set -o errexit' here because we don't want to fail to
# grab other data when we fail to grab data from one source.
#

. /lib/sdc/config.sh
load_sdc_config

function usage
{
    echo "Usage: `basename $0` [-d dir] [-o output] [-c content] [-iu]"
    usage=/tmp/usage.$$

    #
    # Some things are just worth doing properly.
    #
    cat > $usage <<EOF
        BEGIN { p = indent = 8; printf("%*s", p - 1, ""); }
        {
            l = length($1) + 1;
            if (p + l >= 80) {
                printf("\n%*s%s", indent, "", \$1);
                p = indent + l;
            } else {
                printf(" %s", \$1);
                p += l;
            }
        }
        END { printf("\n"); }
EOF

    echo "  'content' must be one or more of:"
    compgen -A function grab_ | cut -d_ -f2- | nawk -f $usage
    rm $usage
    exit 1
}

function do_countdown
{
    echo ""
    echo "This tool will create an SDC support bundle in `dirname $TEMPDIR`."
    echo "This may take some time...  If you wish to abort press CTRL-C now!"
    echo ""
    countdown=$((${COUNTDOWN} - 1))
    while [[ ${countdown} -ge 0 ]]; do
        printf "                                   \r"
        printf "Starting in ${countdown} seconds...\r"
        sleep 1
        countdown=$((${countdown} - 1))
    done
    echo ""
    echo ""
}

function grab_sysinfo
{
    echo "  > sysinfo"
    sysinfo > ${TEMPDIR}/sysinfo.json
}

function grab_dlinfo
{
    echo "  > datalink info"
    dladm show-phys -m > ${TEMPDIR}/dladm.phys
    dladm show-vnic > ${TEMPDIR}/dladm.vnic
    dladm show-linkprop > ${TEMPDIR}/dladm.linkprop
    dladm show-bridge > ${TEMPDIR}/dladm.bridge
}

function grab_ifconfig
{
    echo "  > network interface info"
    ifconfig -a > ${TEMPDIR}/ifconfig.a
}

function grab_routes
{
    echo "  > routing table"
    netstat -rn > ${TEMPDIR}/netstat.rn
}

function grab_auditlog
{
    echo "  > auditlog info"
    (cd /var/audit && tar -zcvf ${TEMPDIR}/var.audit.tar.gz .) >&4 2>&1
}

function grab_svcs
{
    echo "  > services"
    echo "    (all services)"
    svcs -Z -a > ${TEMPDIR}/svcs.all
    mkdir ${TEMPDIR}/svccfg_archive
    echo "    (global service archive)"
    svccfg archive | gzip -c > ${TEMPDIR}/svccfg_archive/global.gz
    if [[ -d /usbkey/zones ]]; then
        for zone in $(cd /usbkey/zones ; ls); do
            echo "    (service archive for $zone)"
            zlogin ${zone} svccfg archive \
            | gzip -c > ${TEMPDIR}/svccfg_archive/${zone}.gz
        done
    fi
}

function grab_ps
{
    echo "  > process information"
    ps -efZ > ${TEMPDIR}/ps.efZ
}

function grab_zfsinfo
{
    echo "  > zfs info"
    echo "    (zpool status)"
    zpool status -v > ${TEMPDIR}/zpool.status
    echo "    (zfs list)"
    zfs list -t all > ${TEMPDIR}/zfs.list
}

function grab_df
{
    echo "  > disk utilization"
    df > ${TEMPDIR}/df
}

function grab_modinfo
{
    echo "  > module information"
    modinfo -w > ${TEMPDIR}/modinfo
}

function grab_headnode_info
{
    if [[ -d /usbkey ]]; then
        find /usbkey -ls > ${TEMPDIR}/usbkey.filelist
        echo "  > usbkey filelist"
        tar -cvf ${TEMPDIR}/usbkey.config.tar usbkey/config* >&4 2>&1
    fi
}

function grab_zoneinfo
{
    echo "  > zone list"
    zoneadm list -v -c > ${TEMPDIR}/zonelist.vc
    echo "  > zone kernel state"
    zonemon -k > ${TEMPDIR}/zonekstate
}

function grab_zoneconfigs
{
    echo "  > zone configs"
    tar -cvf ${TEMPDIR}/zone.configs.tar etc/zones >&4 2>&1
}

function grab_zonelogs
{
    if [[ -n $headnode ]]; then
        echo "  > zone logs"
        tar -zcvf ${TEMPDIR}/zone.logs.tar.gz zones/*/root/var/svc/log \
            zones/*/root/opt/smartdc/*/log >&4 2>&1
    fi
}

function grab_cores
{
    if [[ -n $headnode ]]; then
        echo "  > cores"
        tar -zcvf ${TEMPDIR}/cores.tar.gz zones/*/cores >&4 2>&1
    fi
}

function grab_dumps
{
    # These are already compressed
    echo "  > kernel crash dumps"
    tar -cvf ${TEMPDIR}/dumps.tar var/crash/volatile >&4 2>&1
}

function grab_fmdump
{
    echo "  > fmdump"
    fmdump > ${TEMPDIR}/fmdump.out
    fmdump -e > ${TEMPDIR}/fmdump.e.out
}

function grab_logs
{
    echo "  > logs"
    tar -zcvf ${TEMPDIR}/gz-logs.tar.gz var/svc/log \
        etc/svc/volatile var/adm >&4 2>&1
}

function grab_castatus
{
    if [[ -n ${CONFIG_ca_admin_ip} ]]; then
	curl http://${CONFIG_ca_admin_ip}:23181/ca/admin/status?recurse=true >&4 2>&1 \
	| json > ${TEMPDIR}/ca.status
    fi
}

function grab_phonehome
{
    if [[ -d /opt/smartdc/phonehome ]]; then
        tar -zcvf ${TEMPDIR}/phonehome.tar.gz opt/smartdc/phonehome >&4 2>&1
    fi
}

function grab_compute
{
    if [[ -z $headnode ]]; then
        return
    fi

    local oneach=/smartdc/bin/sdc-oneachnode
    local outfile=/var/tmp/bundle.$$
    local destdir=$TEMPDIR/compute-nodes
    local opts="-io $outfile"
    local file

    mkdir -p $destdir

    echo "  > compute nodes"

    #
    # First, generate the bundles
    #
    echo "    (remote bundle generation)"
    $oneach -cv -t 10 -T 1800 /smartdc/bin/sdc-sbcreate -c $opt_c $opts >&4 2>&1

    #
    # Now copy the bundles...
    #
    echo "    (remote bundle collection)"
    $oneach -cv -t 10 -T 1800 -f $outfile -d $destdir >&4 2>&1

    #
    # ...expand them...
    #
    echo "    (remote bundle expansion)"
    for file in `ls -1 $destdir`; do
        mv $file $file.tar.bz2
        ( cd $destdir && ( bzip2 -d -c $file.tar.bz2 | tar xvf - >&4 2>&1 ) )
        rm $file.tar.bz2
    done

    #
    # ...and blow them away.
    #
    echo "    (remote bundle destruction)"
    $oneach -cv -t 10 -T 30 rm $outfile >&4 2>&1
}

function grab_platform_md5
{
    echo "  > kernel & platform integrity hash"
    sum -R -x md5 /usbkey/os > ${TEMPDIR}/platforms_cache.md5 
    /usbkey/scripts/mount-usb.sh
    sum -R -x md5 /mnt/usbkey/os > ${TEMPDIR}/platforms_bootable.md5
}

while getopts "d:o:c:iu" opt; do
    if [[ "$opt" == "?" ]]; then
        usage
    fi

    varname=opt_${opt}

    if [[ -z $OPTARG ]]; then
        eval $varname=true
    else
        eval $varname=\$OPTARG
    fi
done

if [[ -n $opt_c ]]; then
    contents=`echo $opt_c | tr ',' ' '`
    for content in $contents; do
        if ! compgen -A function grab_ | \
          grep "^grab_${content}\$" 1> /dev/null ; then
            echo "`basename $0`: unrecognized content '$content'"
            usage
        fi
    done
fi

# Need the output dir first.
BASEDIR=${opt_d:-/var/tmp}
TEMPDIR=$BASEDIR/sdcsb.$$/`sysinfo | json UUID`
LOGFILE=$BASEDIR/sdcsb.$$.log
FILENAME=sdc-support.$(hostname).$(TZ=UTC date "+%Y%m%dT%H%M%SZ").tar.bz
OUTFILE=${opt_o:-$BASEDIR/$FILENAME}
COUNTDOWN=5

if [[ -z $opt_i ]]; then
    #
    # If the user has not specified immediate operation (-i), give them a
    # sanity pause before beginning -- this script can take some time and
    # write a lot of data.
    do_countdown
fi

if [[ "$(sysinfo | json 'Boot Parameters'.headnode)" == "true" ]]; then
    headnode=true
fi

mkdir -p ${TEMPDIR}

exec 4>${LOGFILE}
export BASH_XTRACEFD=4
export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o xtrace

echo "==> Gathering System Information"

cd /

if [[ -z $opt_c ]]; then 
    #
    # By default, we grab everything except for compute nodes.
    #
    grab_sysinfo
    grab_dlinfo
    grab_ifconfig
    grab_routes
    grab_auditlog
    grab_svcs
    grab_ps
    grab_zfsinfo
    grab_df
    grab_modinfo
    grab_headnode_info
    grab_zoneinfo
    grab_zoneconfigs
    grab_zonelogs
    grab_cores
    grab_dumps
    grab_fmdump
    grab_logs
    grab_castatus
    grab_phonehome
    grab_platform_md5
else
    for content in $contents; do
        eval grab_${content}
    done
fi

echo "==> packing data to ${OUTFILE}"
( cd ${TEMPDIR}/.. && tar -jcvf ${OUTFILE} `basename ${TEMPDIR}` >&4 2>&1 )
mv ${LOGFILE} ${OUTFILE}.log

echo "==> cleaning up"
rm -rf `dirname ${TEMPDIR}`

if [[ -n $opt_u ]]; then
    echo "==> uploading to Joyent support"
    /smartdc/bin/sdc-sbupload ${OUTFILE}
fi

echo "==> done"
