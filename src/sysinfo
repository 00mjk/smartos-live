#!/bin/bash
#
# Copyright (c) 2010 Joyent Inc., All rights reserved.
#
# Output some JSON info representing the system.
#
# Important: Don't use anything here that you don't include in the live image!
#

# helper to set global "normalized" to the expanded version of MAC ($1)
function normalize_mac()
{
    mac=$1
    if [ -z "${mac}" ]; then
      echo "FATAL: unable to normalize empty mac!"
      exit 1
    fi

    normalized=`echo ${mac} | awk -F':' '{ print $1, $2, $3, $4, $5, $6 }' | { read o1 o2 o3 o4 o5 o6 junk
        printf "%02x:%02x:%02x:%02x:%02x:%02x" 0x${o1} 0x${o2} 0x${o3} 0x${o4} 0x${o5} 0x${o6}
    }`

    # ensure results are 'normal'
    echo "${normalized}" | grep "[a-fA-F0-9]\{2\}\:[a-fA-F0-9]\{2\}\:[a-fA-F0-9]\{2\}\:[a-fA-F0-9]\{2\}\:[a-fA-F0-9]\{2\}\:[a-fA-F0-9]\{2\}" >/dev/null 2>&1
    if [ "$?" != "0" ]; then
      echo "FATAL: failed to normalize MAC '${mac}'"
      exit 1
    fi
}

# Get (misnamed in prtconf) memory size in Mebibytes
MEMORY_IN_MiB=`prtconf \
  | grep "Memory size: [0-9]* Megabytes" \
  | cut -d' ' -f3`

SYSTEM_DATA=`smbios -t SMB_TYPE_SYSTEM \
  | egrep "Manufacturer: |Product: |Serial Number: |UUID: " \
  | sed -e 's/^ */  "/' \
  | sed -e 's/: /": "/' \
  | sed -e 's/ *$/",/'`

CPU_VERSION=`smbios -t SMB_TYPE_PROCESSOR | grep -v "Version: 0000000000" \
  | grep "Version: " \
  | head -n1 \
  | tr -s ' ' \
  | sed -e 's/^ *Version: //' \
  | sed -e 's/ *$//'`

CPU_COUNT=`smbios -t SMB_TYPE_PROCESSOR | grep -v "Version: 0000000000" \
  | grep "Version: " \
  | wc -l \
  | tr -d ' '`

CPU_CORES=`psrinfo \
  | grep "^[0-9]" \
  | wc -l \
  | tr -d ' '`

# Add joyent_buildstamp to SYSTEM_INFO
LIVE_IMAGE=$(cat /etc/joyent_buildstamp 2>/dev/null)
if [ -n "${LIVE_IMAGE}" ]; then
  SYSTEM_DATA=$(printf "  \"Live Image\": \"${LIVE_IMAGE}\",\n${SYSTEM_DATA}")
fi

# Populate disk list with "Size in GB" member for each disk
DISKS=""
for line in `/usr/bin/disklist -s 2>/dev/null`; do
  DISKS=`echo ${line} | tr '=' ' ' | { read device size junk
    gb_size=$((${size} / 1000000000))
    echo "\"${device}\": {\"Size in GB\": ${gb_size}}, ${DISKS}"
  }`
done
# clean up formatting of JSON
DISKS=`echo ${DISKS} | sed -e "s/,$//" | sed -e 's/, /,\\
/g' | sed -e "s/^/    /" | sed -e "s/\",\"/\", \"/"`

# Populate the nic list with MAC + admin=true if NIC is admin_nic,
# ignore 'LINK SLOT ADDRESS INUSE CLIENT' line
NICS=""
admin_nic=`/usr/bin/bootparams 2>/dev/null | grep "admin_nic" | cut -d '=' -f2-`
for line in `pfexec /sbin/dladm show-phys -m | grep -v "^LINK " | awk '{ print $1,$3 }' | tr ' ' '='`; do
  NICS=`echo $line | tr '=' ' ' | { read nic mac junk
    admin=""
    ip4data=""
    normalize_mac ${mac}
    mac=${normalized}
    if [ -n "${admin_nic}" ] && [ "${admin_nic}" == "${mac}" ]; then
      admin=",\"Admin NIC\": \"true\""
    fi
    ip4addr=$(ifconfig ${nic} 2>/dev/null | grep "inet " | awk '{ print $2 }')
    if [ -n "${ip4addr}" ]; then
        ip4data=",\"ip4addr\": \"${ip4addr}\""
    fi
    echo "\"${nic}\": {\"MAC Address\": \"${mac}\"${ip4data}${admin}}, ${NICS}"
  }`
done
# clean up formatting of JSON
NICS=`echo ${NICS} | sed -e "s/,$//" | sed -e 's/, /,\\
/g' | sed -e "s/^/    /" | sed -e "s/\",\"/\", \"/g"`

# Output the JSON!
cat <<EOF
{
${SYSTEM_DATA}
  "CPU Type": "${CPU_VERSION}",
  "CPU Physical Cores": ${CPU_COUNT},
  "CPU Total Cores": ${CPU_CORES},
  "MiB of Memory": ${MEMORY_IN_MiB},
  "Disks": {
${DISKS}
  },
  "Network Interfaces": {
${NICS}
  }
}
EOF
